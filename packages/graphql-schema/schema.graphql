type User {
  id: ID!
  email: String!
  name: String!
  role: UserRole!
  createdAt: String!
  updatedAt: String!
}

enum UserRole {
  STANDARD
  ADMIN
}

type Project {
  id: ID!
  userId: ID!
  name: String!
  description: String
  createdAt: String!
  updatedAt: String!
  lastModified: String!
  snippets: [Snippet!]
}

type ImageMetadata {
  width: Int!
  height: Int!
  aspectRatio: String!
}

type Snippet {
  id: ID!
  projectId: ID!
  userId: ID!
  title: String
  textField1: String!
  position: Position!
  tags: [String!]!
  categories: [String!]!
  version: Int!
  createdAt: String!
  updatedAt: String!
  imageUrl: String
  imageS3Key: String
  imageMetadata: ImageMetadata
  versions: [SnippetVersion!]!
}

type SnippetVersion {
  id: ID!
  snippetId: ID!
  version: Int!
  title: String
  textField1: String!
  createdAt: String!
}

type Connection {
  id: ID!
  projectId: ID!
  sourceSnippetId: ID!
  targetSnippetId: ID!
  connectionType: ConnectionType!
  label: String
  createdAt: String!
  updatedAt: String!
}

enum ConnectionType {
  RELATED
  DEPENDS_ON
  SUPPORTS
  CONTRADICTS
  EXTENDS
  CONTAINS
  REFERENCES
  SIMILAR
  CUSTOM
}

enum ConnectionDirection {
  OUTGOING
  INCOMING
  BOTH
}

type GraphNode {
  snippetId: ID!
  connections: [Connection!]!
  depth: Int!
}

type GraphTraversalResult {
  nodes: [GraphNode!]!
  connections: [Connection!]!
  totalNodes: Int!
  maxDepthReached: Int!
}

type ConnectionTypeCount {
  type: ConnectionType!
  count: Int!
}

type SnippetConnectionStat {
  snippetId: ID!
  connectionCount: Int!
}

type ConnectionStats {
  totalConnections: Int!
  connectionsByType: [ConnectionTypeCount!]!
  mostConnectedSnippets: [SnippetConnectionStat!]!
}

type Position {
  x: Float!
  y: Float!
}

input PositionInput {
  x: Float!
  y: Float!
}

input CreateProjectInput {
  name: String!
  description: String
}

input UpdateProjectInput {
  name: String
  description: String
}

input CreateSnippetInput {
  projectId: ID!
  title: String
  textField1: String
  position: PositionInput!
  tags: [String!]
  categories: [String!]
}

input UpdateSnippetInput {
  title: String
  textField1: String
  position: PositionInput
  tags: [String!]
  categories: [String!]
}

input CreateConnectionInput {
  projectId: ID!
  sourceSnippetId: ID!
  targetSnippetId: ID!
  label: String
}

input UpdateConnectionInput {
  label: String
}

type Query {
  me: User
  projects: [Project!]!
  project(id: ID!): Project
  snippet(id: ID!): Snippet
  snippetVersions(snippetId: ID!): [SnippetVersion!]!
  projectConnections(projectId: ID!, limit: Int): [Connection!]!
  snippetConnections(snippetId: ID!, direction: ConnectionDirection = BOTH, limit: Int): [Connection!]!
  connectionsByType(projectId: ID!, connectionType: ConnectionType!, limit: Int): [Connection!]!
  exploreGraph(
    snippetId: ID!,
    direction: ConnectionDirection = BOTH,
    maxDepth: Int,
    connectionTypes: [ConnectionType!]
  ): GraphTraversalResult!
  connectionStats(projectId: ID!): ConnectionStats!

  # Admin queries
  users: [User!]!
  systemAnalytics: SystemAnalytics!

  # GenAI queries
  availableModels(modality: GenerationModality): [ModelConfig!]!
  generationHistory(snippetId: ID!): [GenerationRecord!]!
}

type Mutation {
  # Project mutations
  createProject(input: CreateProjectInput!): Project!
  updateProject(id: ID!, input: UpdateProjectInput!): Project!
  deleteProject(id: ID!): Boolean!

  # Snippet mutations
  createSnippet(input: CreateSnippetInput!): Snippet!
  updateSnippet(projectId: ID!, id: ID!, input: UpdateSnippetInput!): Snippet!
  deleteSnippet(projectId: ID!, id: ID!): Boolean!
  revertSnippet(projectId: ID!, id: ID!, version: Int!): Snippet!
  generateSnippetImage(projectId: ID!, snippetId: ID!, modelId: ID): Snippet!
  combineSnippetConnections(projectId: ID!, snippetId: ID!): Snippet!

  # Connection mutations
  createConnection(input: CreateConnectionInput!): Connection!
  updateConnection(id: ID!, input: UpdateConnectionInput!): Connection!
  deleteConnection(projectId: ID!, connectionId: ID!): Boolean!

  # Admin mutations
  createUser(email: String!, name: String!, temporaryPassword: String!): User!
  deleteUser(id: ID!): Boolean!
  resetUserPassword(id: ID!): String!

  # GenAI mutations
  generateContent(projectId: ID!, snippetId: ID!, input: GenerateContentInput!): GenerationResult!
  generateContentStream(projectId: ID!, snippetId: ID!, input: GenerateContentInput!): GenerationResult!
  publishGenerationStreamEvent(input: GenerationStreamEventInput!): GenerationStreamEvent!
}

type SystemAnalytics {
  totalUsers: Int!
  totalProjects: Int!
  totalSnippets: Int!
  averageSnippetsPerUser: Float!
}
type Subscription {
  onGenerationStream(snippetId: ID!): GenerationStreamEvent
    @aws_subscribe(mutations: ["publishGenerationStreamEvent"])
}


# GenAI Types

enum ModelProvider {
  GEMINI
  OPENAI
  ANTHROPIC
  CUSTOM
}

enum GenerationModality {
  TEXT_TO_TEXT
  TEXT_TO_IMAGE
  TEXT_AND_IMAGE_TO_IMAGE
  TEXT_TO_VIDEO
  TEXT_TO_AUDIO
}

type ModelConfig {
  id: ID!
  provider: ModelProvider!
  modelId: String!
  modality: GenerationModality!
  displayName: String!
  description: String
  maxTokens: Int
  costPerToken: Float
  enabled: Boolean!
}

type GenerationResult {
  content: String!
  tokensUsed: Int!
  cost: Float!
  modelUsed: String!
  generationTimeMs: Int!
}

type GenerationStreamEvent {
  snippetId: ID!
  content: String
  isComplete: Boolean!
  tokensUsed: Int
}

input GenerationStreamEventInput {
  snippetId: ID!
  content: String
  isComplete: Boolean!
  tokensUsed: Int
}

type GenerationRecord {
  id: ID!
  userId: ID!
  snippetId: ID!
  projectId: ID!
  modelProvider: String!
  modelId: String!
  prompt: String!
  systemPrompt: String
  result: String!
  tokensUsed: Int!
  cost: Float!
  generationTimeMs: Int!
  createdAt: String!
}

input GenerateContentInput {
  modelId: ID!
  prompt: String!
  systemPrompt: String
  temperature: Float
  maxTokens: Int
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
